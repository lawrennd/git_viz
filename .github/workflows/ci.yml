name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  POETRY_VERSION: "1.7.1"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry==${{ env.POETRY_VERSION }}

    - name: Install Gource (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gource ffmpeg

    - name: Install Gource (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install gource ffmpeg

    - name: Install Gource (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install gource ffmpeg -y

    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "dir=$(poetry config cache-dir)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: |
        poetry run pytest tests/ --cov=git_viz --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry==${{ env.POETRY_VERSION }}

    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "dir=$(poetry config cache-dir)" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: poetry install

    - name: Run black
      run: poetry run black . --check

    - name: Run isort
      run: poetry run isort . --check-only

    - name: Run ruff
      run: poetry run ruff check .

    - name: Run mypy
      run: poetry run mypy src/

  publish:
    name: Publish to PyPI
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry==${{ env.POETRY_VERSION }}

    - name: Build and publish
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry build
        poetry publish